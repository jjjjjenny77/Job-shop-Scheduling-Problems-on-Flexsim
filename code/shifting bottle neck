for(int k = 1;k <= 15;k++){
	int sum = 0;
	for(int i = 0;i < 15;i++)
	{
		for(int j = 1;j <= 60; j+=3)
		{
			string bufferName = "Buffer_" + i;
			if (gettablestr("Route", k, j) == bufferName)
			{
				sum += gettablenum("Route", k, j + 2);
			}
		}
		settablenum("MachineSum", i+1, 1, i);
	}
	settablenum("MachineSum", k, 2, sum);
}
//MachineSum table排序
int tmp_sum;
int tmp_buffer;
for(int i = 15; i > 0; i--)
{
    for(int j = 1; j < i; j++)
    {
        if( gettablenum("MachineSum", j, 2) < gettablenum("MachineSum", j+1, 2))
        {
            tmp_sum = gettablenum("MachineSum", j, 2);
            tmp_buffer = gettablenum("MachineSum", j, 1);
            settablenum("MachineSum", j, 2, gettablenum("MachineSum", j+1, 2)) ;
            settablenum("MachineSum", j, 1, gettablenum("MachineSum", j+1, 1)) ;
            settablenum("MachineSum", j+1, 2, tmp_sum);
            settablenum("MachineSum", j+1, 1, tmp_buffer);
        }
    }
}
//瓶頸機台迴圈
int plus_dj;
for (int i = 1; i <= 15; i++)
{
    if(i == 1)
    {
        //將PRD table全部清0
        for(int j = 1; j <= 15; j++)
        {
            for(int k = 1; k <= 3; k++)
            {
                settablenum("PRD", j, k, 0);
            }
        }
        
        //填PRD table
        int machine = gettablenum("MachineSum", i, 1);
        string bufferName = "Buffer_" + machine;
        int pj_count = 1;
        for(int j = 1; j <= 60; j+=3)
        {
            for(int k = 1;k <= 15; k++)
            {
                if (gettablestr("Route", k, j) == bufferName)
                {
                    settablenum("PRD", pj_count, 1, gettablenum("Route", k, j+2));
                    break;
                }
                
            }
            pj_count += 1;
        }
        int rj_count = 1;
        int dj_count = 1;
        for(int j = 1; j <= 60; j+=3)
        {
            int rj_sum = 0;
            int dj_sum = gettablenum("MachineSum", i, 2);
            for(int k = 1 ;k <= 15; k++)
            {
                if (gettablestr("Route", k, j) == bufferName)
                {
                    for(int m = 0; m < k; m++)
                    {
                    rj_sum += gettablenum("Route", m, j+2);
                    }
                    settablenum("PRD", rj_count, 2, rj_sum);
                    for(int n = 15; n > k; n--)
                    {
                    dj_sum -= gettablenum("Route", n, j+2);
                    }
                    settablenum("PRD", dj_count, 3, dj_sum);
                    break;
                }   
            }
        rj_count += 1;
        dj_count +=1;
        }
        //PRD table, job填值
        for(int j = 1; j <= 20; j++)
        {
            settablenum("PRD", j, 4, j);
        }
        //PRD table, dj排序
        int tmp_pj;
        int tmp_rj;
        int tmp_dj;
        int tmp_job;
        for(int i = 20; i > 0; i--)
        {
            for(int j = 1; j < i; j++)
            {
                if( gettablenum("PRD", j, 3) > gettablenum("PRD", j+1, 3))
                {
                    tmp_pj = gettablenum("PRD", j, 1);
                    tmp_rj = gettablenum("PRD", j, 2);
                    tmp_dj = gettablenum("PRD", j, 3);
                    tmp_job = gettablenum("PRD", j, 4);
                    settablenum("PRD", j, 4, gettablenum("PRD", j+1, 4)) ;
                    settablenum("PRD", j, 3, gettablenum("PRD", j+1, 3)) ;
                    settablenum("PRD", j, 2, gettablenum("PRD", j+1, 2)) ;
                    settablenum("PRD", j, 1, gettablenum("PRD", j+1, 1)) ;
                    settablenum("PRD", j+1, 4, tmp_job);
                    settablenum("PRD", j+1, 3, tmp_dj);
                    settablenum("PRD", j+1, 2, tmp_rj);
                    settablenum("PRD", j+1, 1, tmp_pj);
                }
            }
        }
        //CT table,job排序
        int fixed_job = 1;
        
        for(int j = 1;j <= 80;j+=4)
        {
            int job_sequence = 2;
            for(int k = 1;k <= 20;k++)
            {
                if(gettablenum("PRD", k, 4)==fixed_job)
                {
                    settablenum("CT", 1, j, fixed_job);
                    job_sequence -= 1;
                    settablenum("CT", 1, j+1, gettablenum("PRD", k, 1)+gettablenum("PRD", k, 2));
                    settablenum("CT", 1, j+2, gettablenum("PRD", k, 3));
                }
                else
                {
                    settablenum("CT", job_sequence, j, gettablenum("PRD", k, 4));
                    settablenum("CT", job_sequence, j+2, gettablenum("PRD", k, 3));
                }
                job_sequence += 1;
            }
            int cj_sequence = 1;
            for(int k = 2;k <= 20; k++)
            {
                if(gettablenum("PRD", k-1, 4)==fixed_job)
                {
                    cj_sequence += 1;
                    if(gettablenum("CT", k-1, j+1) < gettablenum("PRD", k-1, 2))
                    {
                        settablenum("CT", k, j+1, gettablenum("PRD", cj_sequence, 2)+gettablenum("PRD", cj_sequence, 1));
                    }
                    else
                    {
                        settablenum("CT", k, j+1, gettablenum("CT", k-1, j+1)+gettablenum("PRD", cj_sequence, 1));
                    }
                }
                else
                {
                    if(gettablenum("CT", k-1, j+1) < gettablenum("PRD", k-1, 2))
                    {
                        settablenum("CT", k, j+1, gettablenum("PRD", cj_sequence, 2)+gettablenum("PRD", cj_sequence, 1));
                    }
                    else
                    {
                        settablenum("CT", k, j+1, gettablenum("CT", k-1, j+1)+gettablenum("PRD", cj_sequence, 1));
                    }
                }
                cj_sequence += 1;
            }
            fixed_job += 1;
            for(int k = 1; k <= 20; k++)
            {
                if(gettablenum("CT", k, j+1) < gettablenum("CT", k, j+2))
                {
                    settablenum("CT", k, j+3, 0);
                }else
                {
                    settablenum("CT", k, j+3, gettablenum("CT", k, j+1) - gettablenum("CT", k, j+2));
                }
            }
            //找tj max值
            int tj_max = 0;
            for(int k = 1;k <= 20;k++)
            {
                if (gettablenum("CT", k, j+3) > tj_max)
                {
                    tj_max = gettablenum("CT", k, j+3);
                }
            }
            settablenum("CT", 21, j+3, tj_max);
        }
        //找tjmaxmin並填進DispatchRule
        int tj_maxmin = 99999;
        int min_columns;
        for(int k = 4;k <= 80;k+=4)
        {
            if (gettablenum("CT", 21, k) < tj_maxmin)
            {
                tj_maxmin = gettablenum("CT", 21, k);
                plus_dj = tj_maxmin;
                min_columns = k;
                
            }
        }
        //填dispatch_pj表格及DispatchRule表格
        for(int k = 1;k <= 20;k++)
        {
            settablenum("DispatchRule", k, machine+1, gettablenum("CT", k, min_columns-3));
            settablenum("dispatch_pj", k, 1, gettablenum("CT", k, min_columns-3));
            for(int l = 1;l <= 20;l++)
            {
                if(gettablenum("PRD", l, 4) == gettablenum("CT", k, min_columns-3))
                {
                    settablenum("dispatch_pj", k, 2, gettablenum("PRD", l, 1));
                }
            }
        }
        //填update_route表格
        int update_count = 1;
        string bufferName_next = "Buffer_" + gettablenum("MachineSum", i+1, 1);
        for(int j = 1; j <= 60; j+=3)
        {
            int next_buffer_position = 0;
            int new_route_count = 0;
            for(int k = 1;k <= 15; k++)
            {
                if (gettablestr("UpdateRoute", k, j) == bufferName_next)
                {
                    next_buffer_position = k;
                }
            }
            for(int k = 1;k <= 15; k++)
            {
                if (gettablestr("UpdateRoute", k, j) == bufferName)
                {
                    if(next_buffer_position < k)
                    {
                        for(int l = 1;l <= 20;l++)
                        {
                            if(gettablenum("dispatch_pj", l, 1) == update_count)
                            {
                                for(int m = l;m <= 20;m++)
                                {
                                    new_route_count += gettablenum("dispatch_pj", m, 2);
                                }
                                break;
                            }
                        }
                        settablenum("UpdateRoute", k, j+2, new_route_count);
                        for(int l = k+1;l <= 15; l++)
                        {
                            settablenum("UpdateRoute", l, j+2, 0);
                        }
                        break;
                    }
                    else
                    {
                        break;
                    }
                }
                
            }
            update_count += 1;
        }
    }
    else
	{
        //將PRD table全部清0
        for(int j = 1; j <= 15; j++)
        {
            for(int k = 1; k <= 3; k++)
            {
                settablenum("PRD", j, k, 0);
            }
        }
        int machine = gettablenum("MachineSum", i, 1);
        string bufferName = "Buffer_" + machine;
        //填pj
        int pj_count = 1;
        for(int j = 1; j <= 60; j+=3)
        {
            for(int k = 1;k <= 15; k++)
            {
                if (gettablestr("Route", k, j) == bufferName)
                {
                    settablenum("PRD", pj_count, 1, gettablenum("Route", k, j+2));
                    break;
                }
                
            }
            pj_count += 1;
        }
        int rj_count = 1;
        int dj_count = 1;
        for(int j = 1; j <= 60; j+=3)
        {
            int rj_sum = 0;
            //二次瓶頸機台迴圈後dj變化
            int dj_sum = gettablenum("MachineSum", 1, 2)+plus_dj;
            for(int k = 1 ;k <= 15; k++)
            {
                if (gettablestr("Route", k, j) == bufferName)
                {
                    //rj
                    for(int m = 0; m < k; m++)
                    {
                    rj_sum += gettablenum("Route", m, j+2);
                    }
                    settablenum("PRD", rj_count, 2, rj_sum);
                    //dj
                    for(int n = 15; n > k; n--)
                    {
                    dj_sum -= gettablenum("UpdateRoute", n, j+2);
                    }
                    settablenum("PRD", dj_count, 3, dj_sum);
                    break;
                }   
            }
        rj_count += 1;
        dj_count +=1;
        }
        //PRD table, job填值
        for(int j = 1; j <= 20; j++)
        {
            settablenum("PRD", j, 4, j);
        }
        //PRD table, dj排序
        int tmp_pj;
        int tmp_rj;
        int tmp_dj;
        int tmp_job;
        for(int i = 20; i > 0; i--)
        {
            for(int j = 1; j < i; j++)
            {
                if( gettablenum("PRD", j, 3) > gettablenum("PRD", j+1, 3))
                {
                    tmp_pj = gettablenum("PRD", j, 1);
                    tmp_rj = gettablenum("PRD", j, 2);
                    tmp_dj = gettablenum("PRD", j, 3);
                    tmp_job = gettablenum("PRD", j, 4);
                    settablenum("PRD", j, 4, gettablenum("PRD", j+1, 4)) ;
                    settablenum("PRD", j, 3, gettablenum("PRD", j+1, 3)) ;
                    settablenum("PRD", j, 2, gettablenum("PRD", j+1, 2)) ;
                    settablenum("PRD", j, 1, gettablenum("PRD", j+1, 1)) ;
                    settablenum("PRD", j+1, 4, tmp_job);
                    settablenum("PRD", j+1, 3, tmp_dj);
                    settablenum("PRD", j+1, 2, tmp_rj);
                    settablenum("PRD", j+1, 1, tmp_pj);
                }
            }
        }
        //CT table,job排序
        int fixed_job = 1;
        
        for(int j = 1;j <= 80;j+=4)
        {
            int job_sequence = 2;
            for(int k = 1;k <= 20;k++)
            {
                if(gettablenum("PRD", k, 4)==fixed_job)
                {
                    settablenum("CT", 1, j, fixed_job);
                    job_sequence -= 1;
                    settablenum("CT", 1, j+1, gettablenum("PRD", k, 1)+gettablenum("PRD", k, 2));
                    settablenum("CT", 1, j+2, gettablenum("PRD", k, 3));
                }
                else
                {
                    settablenum("CT", job_sequence, j, gettablenum("PRD", k, 4));
                    settablenum("CT", job_sequence, j+2, gettablenum("PRD", k, 3));
                }
                job_sequence += 1;
            }
            int cj_sequence = 1;
            for(int k = 2;k <= 20; k++)
            {
                if(gettablenum("PRD", k-1, 4)==fixed_job)
                {
                    cj_sequence += 1;
                    if(gettablenum("CT", k-1, j+1) < gettablenum("PRD", k-1, 2))
                    {
                        settablenum("CT", k, j+1, gettablenum("PRD", cj_sequence, 2)+gettablenum("PRD", cj_sequence, 1));
                    }
                    else
                    {
                        settablenum("CT", k, j+1, gettablenum("CT", k-1, j+1)+gettablenum("PRD", cj_sequence, 1));
                    }
                }
                else
                {
                    if(gettablenum("CT", k-1, j+1) < gettablenum("PRD", k-1, 2))
                    {
                        settablenum("CT", k, j+1, gettablenum("PRD", cj_sequence, 2)+gettablenum("PRD", cj_sequence, 1));
                    }
                    else
                    {
                        settablenum("CT", k, j+1, gettablenum("CT", k-1, j+1)+gettablenum("PRD", cj_sequence, 1));
                    }
                }
                cj_sequence += 1;
            }
            fixed_job += 1;
            for(int k = 1; k <= 20; k++)
            {
                if(gettablenum("CT", k, j+1) < gettablenum("CT", k, j+2))
                {
                    settablenum("CT", k, j+3, 0);
                }else
                {
                    settablenum("CT", k, j+3, gettablenum("CT", k, j+1) - gettablenum("CT", k, j+2));
                }
            }
            //找tj max值
            int tj_max = 0;
            for(int k = 1;k <= 20;k++)
            {
                if (gettablenum("CT", k, j+3) > tj_max)
                {
                    tj_max = gettablenum("CT", k, j+3);
                }
            }
            settablenum("CT", 21, j+3, tj_max);
        }
        //找tjmaxmin並填進DispatchRule
        int tj_maxmin = 99999;
        int min_columns;
        for(int k = 4;k <= 80;k+=4)
        {
            if (gettablenum("CT", 21, k) < tj_maxmin)
            {
                tj_maxmin = gettablenum("CT", 21, k);
                plus_dj = tj_maxmin;
                min_columns = k;
                
            }
        }
        //填dispatch_pj表格及DispatchRule表格
        for(int k = 1;k <= 20;k++)
        {
            settablenum("DispatchRule", k, machine+1, gettablenum("CT", k, min_columns-3));
            settablenum("dispatch_pj", k, 1, gettablenum("CT", k, min_columns-3));
            for(int l = 1;l <= 20;l++)
            {
                if(gettablenum("PRD", l, 4) == gettablenum("CT", k, min_columns-3))
                {
                    settablenum("dispatch_pj", k, 2, gettablenum("PRD", l, 1));
                }
            }
        }
        //填update_route表格
        int update_count = 1;
        string bufferName_next = "Buffer_" + gettablenum("MachineSum", i+1, 1);
        for(int j = 1; j <= 60; j+=3)
        {
            int next_buffer_position = 0;
            int new_route_count = 0;
            for(int k = 1;k <= 15; k++)
            {
                if (gettablestr("UpdateRoute", k, j) == bufferName_next)
                {
                    next_buffer_position = k;
                }
            }
            for(int k = 1;k <= 15; k++)
            {
                if (gettablestr("UpdateRoute", k, j) == bufferName)
                {
                    if(next_buffer_position < k)
                    {
                        for(int l = 1;l <= 20;l++)
                        {
                            if(gettablenum("dispatch_pj", l, 1) == update_count)
                            {
                                for(int m = l;m <= 20;m++)
                                {
                                    new_route_count += gettablenum("dispatch_pj", m, 2);
                                }
                                break;
                            }
                        }
                        settablenum("UpdateRoute", k, j+2, new_route_count);
                        for(int l = k+1;l <= 15; l++)
                        {
                            settablenum("UpdateRoute", l, j+2, 0);
                        }
                        break;
                    }
                    else
                    {
                        break;
                    }
                }
                
            }
            update_count += 1;
        }
    }
}